processes = ['P1', 'P2', 'P3', 'P4']
burst_times = [10, 4, 6, 8]
arrival_times = [0, 1, 3, 5]
quantum = 3

def round_robin_with_arrival(processes, burst_times, arrival_times, quantum):
    n = len(processes)
    remaining_times = burst_times[:]
    t = 0  # System time
    ready_queue = []
    completed_processes = 0
    i = 0
    
    ct = [0] * n  # Completion time
    tat = [0] * n  # Turnaround time
    wt = [0] * n  # Waiting time
    gantt_chart = []

    while completed_processes < n:
        while i < n and arrival_times[i] <= t:
            ready_queue.append(i)
            i += 1

        if ready_queue:
            current_process = ready_queue.pop(0)
            gantt_chart.append((processes[current_process], t))

            if remaining_times[current_process] > quantum:
                t += quantum
                remaining_times[current_process] -= quantum
            else:
                t += remaining_times[current_process]
                ct[current_process] = t  # Completion time
                remaining_times[current_process] = 0
                completed_processes += 1

            if remaining_times[current_process] > 0:
                ready_queue.append(current_process)
        else:
            t += 1

        while i < n and arrival_times[i] <= t:
            ready_queue.append(i)
            i += 1

    for j in range(n):
        tat[j] = ct[j] - arrival_times[j]  # Turnaround time
        wt[j] = tat[j] - burst_times[j]    # Waiting time

    avg_tat = sum(tat) / n
    avg_wt = sum(wt) / n

    print("\nProcess\tBT\tAT\tCT\tTAT\tWT")
    for j in range(n):
        print(f"{processes[j]}\t{burst_times[j]}\t{arrival_times[j]}\t{ct[j]}\t{tat[j]}\t{wt[j]}")

    print(f"\nAverage Turnaround Time: {avg_tat:.2f}")
    print(f"Average Waiting Time: {avg_wt:.2f}")

    print("\nGantt Chart (Traditional Representation):")
    print("|", end="")
    for process, start_time in gantt_chart:
        print(f" {process} |", end="")
    print()
    
    print(f"0", end="")
    for process, start_time in gantt_chart[1:]:
        print(f"    {start_time}", end="")
    print(f"    {t} units")

round_robin_with_arrival(processes, burst_times, arrival_times, quantum)